<% if (utils.isPresentableEntity(entity) && entity._booleans.api.hasAny) { -%>
// library imports
import createHttpError from 'http-errors';

// config imports
import { Context } from '<%- config._packages.api.serviceToContextFull %>';

// entity imports
import { <%= entity._strings.entityClass %> } from '<%- entity._packages.api.serviceToEntityFull %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type._strings.externalClass %> } from '<%- type._packages.api.serviceToExternalFull %>';
  <%_ }); -%>
import {
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from '<%- entity._packages.api.serviceToTypeFull %>';
import {
  <%_ if (entity._booleans.api.hasSearch) { -%>
  <%= entity._strings.api.searchQuery %>,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetMany) { -%>
  <%= entity._strings.api.getManyQuery %>,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetOneRequest) { -%>
  <%= entity._strings.api.getOneParams %>,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasCreateOne) { -%>
  <%= entity._strings.api.createOneBody %>,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasUpdateOne) { -%>
  <%= entity._strings.api.updateOneBody %>,
  <%_ } -%>
} from '<%- entity._packages.api.serviceToRequestFull %>';
import { <%= entity._strings.api.serviceInterfaceClass %> } from '<%- entity._packages.api.serviceToServiceInterfaceFull %>';
  <%_ if (entity._booleans.api.hasSearch) { -%>
import { <%= entity._strings.api.searchServiceClass %> } from './<%= entity._strings.api.searchServiceModuleName %>';

async function search(query: <%= entity._strings.api.searchQuery %>, context: Context): Promise<<%= entity._strings.entityClass %>[]> {
  return await new <%= entity._strings.api.searchServiceClass %>().search(query, context);
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetMany) { -%>

async function getMany(query: <%= entity._strings.api.getManyQuery %>, context: Context): Promise<<%= entity._strings.entityClass %>[]> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetOne || entity._booleans.api.hasUpdateOne || entity._booleans.api.hasDeleteOne) { -%>

async function getOne(params: <%= entity._strings.api.getOneParams %>, context: Context): Promise<<%= entity._strings.entityClass %>> {
    <%_ if (entity._booleans.api.hasGetOneSafe) { -%>
  const one = await getOneSafe(params, context);
  if (one === null) {
    throw createHttpError.NotFound();
  }
  return one;
  <%_ } else { -%>
    throw createHttpError.NotImplemented();
    <%_ } -%>
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetOneSafe) { -%>

async function getOneSafe(params: <%= entity._strings.api.getOneParams %>, context: Context): Promise<<%= entity._strings.entityClass %> | null> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasCreateOne) { -%>

async function createOne(body: <%= entity._strings.api.createOneBody %>, context: Context): Promise<<%= entity._strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasUpdateOne) { -%>

async function updateOne(one: <%= entity._strings.entityClass %>, body: <%= entity._strings.api.updateOneBody %>, context: Context): Promise<<%= entity._strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity._booleans.api.hasDeleteOne) { -%>

async function deleteOne(one: <%= entity._strings.entityClass %>, context: Context): Promise<<%= entity._strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= entity._strings.api.serviceClass %>: <%= entity._strings.api.serviceInterfaceClass %> = {
  <%_ if (entity._booleans.api.hasSearch) { -%>
  search,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetOne || entity._booleans.api.hasUpdateOne || entity._booleans.api.hasDeleteOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasGetOneSafe) { -%>
  getOneSafe,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity._booleans.api.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= entity._strings.api.serviceClass %>;
<% } -%>
